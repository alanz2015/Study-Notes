How to customize Ubuntu version Linux kernel
============================================
Reference:
    * https://askubuntu.com/questions/163298/whats-a-simple-way-to-recompile-the-kernel/830723#830723
    * Building Kernel DEB packages: http://r.outlyer.net/debian:kerneldeb

1. Use apt-get source to download the Ubuntu version of the kernel

apt-get source linux-image-$(uname -r)

gives a folder that contains, for example:

linux-3.2.0                linux_3.2.0-26.41.dsc
linux_3.2.0-26.41.diff.gz  linux_3.2.0.orig.tar.gz

The bolded diff includes all the Ubuntu/Debian customizations.
2. To build a stock kernel with your own .config, use the "old-fashioned" Debian make-kpkg method

This is the alternate old-fashioned way described in the wiki:

sudo apt-get install kernel-package

If you are compiling a kernel for the first time:

sudo apt-get build-dep linux-image-$(uname -r)

Then cd into the source directory (here, linux-3.2.0), and either run make oldconfig to create .config file with your running kernel's configuration, or copy a third-part .config to this directory.

Depending on whether you want a text or graphical config, install:
sudo apt-get install libncurses5 libncurses5-dev

make clean
make mrproper
make menuconfig

#Install necessary things
apt-get update
apt-get install kernel-package libncurses5-dev fakeroot wget bzip2 build-essential -y
fakeroot make-kpkg -j N --initrd --append-to-version=my-very-own-kernel kernel-image kernel-headers

Trouble Shooting:
~~~~~~~~~~~~~~~~~
Sometimes when encounter dpkg-gencontrol failure for '_' char, can fix as following:
make menuconfig -> General setup -> Local version - append to kernel release

Add kernel commandline parameters:
+CONFIG_CMDLINE="foo=1"
+CONFIG_CMDLINE_EXTEND=y

Check runtime:-
$cat /proc/cmdline

that is CONFIG_LOCALVERSION in the .config file.
https://debian-handbook.info/browse/squeeze/sect.kernel-compilation.html
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

where N is how many jobs to run in parallel (usually the number of CPUs you have), and my-very-own-kernel is a custom string to identify this build.

When done, the kernel image and header files will be ready as debs in the parent directory; you can install them with sudo dpkg -i, which will also take care of adding GRUB entries, etc.


Live CD Customization From Scratch
==================================
https://help.ubuntu.com/community/LiveCDCustomizationFromScratch

Step 1: 
sudo apt-get install debootstrap

# alternatively, download the package and run sudo dpkg -i debootstrap_$VERSION.deb

mkdir -p work/chroot

cd work

sudo debootstrap --arch=amd64 xenial|trusty|... chroot 

Step 2:
sudo mount --bind /dev chroot/dev
sudo cp /etc/hosts chroot/etc/hosts
sudo cp /etc/resolv.conf chroot/etc/resolv.conf
sudo cp /etc/apt/sources.list chroot/etc/apt/sources.list
Note: If you are bootstrapping a release of Ubuntu other then the release you are currently running you should substitute the 'sudo cp /etc/apt/sources.list chroot/etc/apt/sources.list' command with the following.


sudo sed s/<Release-You-Are-On>/<Release-You-Are-Bootstrapping>/ < /etc/apt/sources.list > chroot/etc/apt/sources.list

Step 3:
sudo chroot chroot

mount none -t proc /proc
mount none -t sysfs /sys
mount none -t devpts /dev/pts
export HOME=/root
export LC_ALL=C
sudo apt-key adv --keyserver keyserver.ubuntu.com --recv-keys 12345678  #Substitute "12345678" with the PPA's OpenPGP ID.
apt-get update  // Need to specify proxy here
apt-get install --yes dbus
dbus-uuidgen > /var/lib/dbus/machine-id
dpkg-divert --local --rename --add /sbin/initctl

NOTE: If remove everything, you need to do "umount" one by one.

Step 4:
Upgrade packages if you want: 


apt-get --yes upgrade
Install packages needed for Live System:

apt-get install --yes ubuntu-standard casper lupin-casper
apt-get install --yes discover laptop-detect os-prober
apt-get install --yes linux-generic 

apt-get install fakeroot build-essential devscripts
apt-get install crash kexec-tools makedumpfile kernel-wedge
apt-get build-dep linux-image-$(uname -r)
apt-get install git libncurses5 libncurses5-dev libnewt-dev

Step 5:
To retrieve specifid kernel release bundled with Ubuntu release (xenial), to do
sudo git clone git://kernel.ubuntu.com/ubuntu/ubuntu-xenial.git

inside the "git clone" directory, you can see there exist ubuntu-flavor scripts.

Step 6:
root@alanzelite-VirtualBox:/ubuntu-xenial# head -5 Makefile
VERSION = 4
PATCHLEVEL = 4
SUBLEVEL = 59
EXTRAVERSION =
NAME = Blurry Fish Butt
root@alanzelite-VirtualBox:/ubuntu-xenial# git rm debian.master/changelog

DEBEMAIL="zhangx2000@hotmail.com"; DEBFULLNAME="Alan Zhang"; dch -v 4.4.59-999.201705081943 --distribution xenial --package linux --create -c debian.master/changelog Mainline build: v4.4.59

Modify check files
During modification of configuration files and during the compilation process, Ubuntu does some checks to see if it all looks good but as we are not compiling a kernel with Ubuntu patches these checks might fail. Therefor we will be modifying these files and instead of doing it manually we’ll use a small script to accomplish the needed changes.

for i in debian/scripts/*-check debian.master/scripts/*-check
do
    if [ -f "$i" ]; then
        cat - <<eom>"$i"
#!/bin/sh
exit 0
EOM
        chmod 755 "$i"
    fi
done
</eom>

git commit -a -m "Our own kernel"

Step 7:
Create a new config

Step 8:
cd ../linux-4.14.89/
ls -al
git status
make menuconfig
perl -pi -e 's/.*CONFIG_LOCALVERSION=.*/CONFIG_LOCALVERSION=".alanz.0"/' .config
make olddefconfig
make -j8 bindeb-pkg     # Inside Ubuntu kernel build env, use command "fakeroot debian/rules binary-debs flavours=generic" instead

Another thread to Upgrade kernel w/ current usage kernel config file when encounter boot
failure phenomena:

* cp /boot/config-* kernel/arch/x86/configs/test4spurv_defconfig
* ./scripts/kconfig/merge_config.sh arch/x86/configs/test4spurv_defconfig /YourAndroidAlternative/kernel.config
* perl -pi -e 's/.*CONFIG_LOCALVERSION=.*/CONFIG_LOCALVERSION=".alanz20190506.0"/' .config
* make olddefconfig
* make -j8 bindeb-pkg

Step 9:
sudo dpkg -i ../*.deb

Quotation:
~~~~~~~~~~
https://wiki.ubuntu.com/Kernel/BuildYourOwnKernel
https://help.ubuntu.com/community/Kernel/Compile
https://help.ubuntu.com/community/LiveCDCustomizationFromScratch
https://wiki.ubuntu.com/KernelTeam/GitKernelBuild
https://wiki.ubuntu.com/Kernel/MainlineBuilds
https://wiki.archlinux.org/index.php/kernel_parameters
https://www.linuxquestions.org/questions/debian-26/how-to-install-debian-using-debootstrap-4175465295/
https://unix.stackexchange.com/questions/275429/creating-bootable-debian-image-with-debootstrap


How to enable Audio Enabling on Z8350 + Linux kernel 4.14.89
============================================================
Source: 
https://askubuntu.com/questions/1004998/ubuntu-17-10-cherry-trail-problem-with-sound-funny-and-sad
https://patchwork.kernel.org/patch/9212963/
https://docs.google.com/document/d/1AcXZI9dvJBW0Vy6h9vraD7VP9X_MpwHx0eJ6hNc4G_s/edit

显示模块信息：
$ modinfo module_name
显示所有模块的配置信息：
$ modprobe -c | less
显示某个模块的配置信息：
$ modprobe -c | grep module_name
显示一个装入模块使用的选项：
$ systool -v -m module_name
显示模块的依赖关系：
$ modprobe --show-depends module_name


in etc/modprobe.d create file blacklist_hdmi.conf with contents:

blacklist snd_hdmi_lpe_audio
download and run this linixium sh script:

https://drive.google.com/file/d/0B99O3A0dDe67VUNMV2xfVjJKeVk/edit

in /usr/share/alsa/ucm/ create a bytcr-rt5651 folder with contents:

asound.state

bytcr-rt5651.conf

HiFi.conf

sudo alsa force-reload

rm -r ~/.pulse ~/.asound* ~/.pulse-cookie ~/.config/pulse
pulseaudio -k
reboot
open pavucontrol and set configuration profile to HiFi and change output from headphones to speakers.

Bash script sample file:
========================
#!/bin/bash

sudo apt-get update
sudo apt-get upgrade
sudo dpkg -i ~/workspace/*.deb
sudo echo "blacklist snd_hdmi_lpe_audio" >> /etc/modprobe.d/blacklist_hdmi.conf
sudo -E ./linuxium-install-UCM-files.sh

sudo alsa force-reload
rm -r ~/.pulse ~/.asound* ~/.pulse-chttps://0xax.gitbooks.io/linux-insides/content/Booting/ookie ~/.config/pulse
pulseaudio -k

sudo cp ./brcmfmac43455-sdio.txt /lib/firmware/brcm/brcmfmac43455-sdio.txt

sudo reboot

---- End of File ----

Enabling ES8316
---------------
Reference:
https://bugzilla.kernel.org/show_bug.cgi?id=189261

/sound/soc/codecs/es8316.c  : Codec driver. Should occur /sys/bus/acpi/devices/ESSX
/sound/soc/codecs/es8316.h
/sound/soc/codecs/Makefile
/sound/soc/codecs/Kconfig
/sound/soc/intel/Kconfig
/sound/soc/intel/boards/cht_bsw_es8316.c | bytcht_es8316.c  : stands for Machine Driver that define DAI name i2c-ESSX8316:00.
/sound/soc/intel/boards/Makefile
/sound/soc/intel/sst/atom/sst_acpi.c    : Associated with /sys/bus/acpi/devices/808622AB:00/, enable SST module, also involve 'intel_sst_acpi 808622A8:00: Direct firmware load for intel/fw_sst_22a8.bin

Enabling AP6255 Bluetooth on Z8350
----------------------------------
Reference:
https://lists.ubuntu.com/archives/kernel-team/2018-May/092134.html

Set up Ubuntu VPN Guide
-----------------------
https://intelpedia.intel.com/VpnQuickStart
https://wiki.ith.intel.com/display/CTSNMPDBG/Intel+VPN+on+Ubuntu+Linux

Cross Build kernel for Android
------------------------------
export CROSS_COMPILE=$(pwd)/bin/aarch64-linux-android-
export ARCH=arm64 && export SUBARCH=arm64 

mkdir -p out
make O=out clean
make O=out mrproper
make O=out <defconfig_name>
make O=out -j$(nproc)

Reference Book: 
https://0xax.gitbooks.io/linux-insides/content/Booting/
Android-X86 Kernel Repo: https://zh.osdn.net/projects/android-x86/scm/git/kernel/branches

Portage Building Chain for Chromium OS
--------------------------------------
overlay-xxx --> baseboard-yyy ---> chipset-zzz

Inside each overlay-xxx (ex. overlay-amd64-generic):
layout.conf: 



Intel Yocto Release Build Steps
-------------------------------
Step 1: Sync code: git clone https://github.com/intel/iotg-yocto-bsp-public.git -b e3900/master
Step 2: Execute python script to retrieve packages by: ./setup/combo-layer ./setup/combolayer.conf
Step 3: Set up TEMPLATECONF by: export TEMPLATECONF=/home/<user>/iotg-yocto-bsp-public/setup/bsp-conf/
Step 4: Execute 1st building by: ./setup.sh
For late build, just enter xxx/yocto_build, then execute "source ./oe-init-build-env .", then
# For core-image-sato
$ bitbake core-image-sato
# For core-image-sato-sdk
$ bitbake core-image-sato-sdk
# For linux-kernel bzIMage only
$ bitbake linux-intel

Kernelflinger
-------------
Kernelflinger is the Intel UEFI bootloader for
Android<sup>TM</sup>/Brillo<sup>TM</sup>. It is compatible with the
[UEFI 2.4 specification](http://www.uefi.org/sites/default/files/resources/2_4_Errata_B.pdf).

git submodule update --init --recursive


ShadowsocksR SSR on Ubuntu
--------------------------
Reference: https://arcdetri.github.io/shadowsocksr-ssr-on-ubuntu.html

In this post, a browser on an Ubuntu client PC sends its traffic to a ShadowsocksR (SSR) proxy on a virtual private server (VPS).
Official Source and Mirror

You can obtain the materials you need to follow along with this tutorial from the official sources on Github:
shadowsocksr-android-3.5.4.apk -- https://github.com/shadowsocksrr/shadowsocksr-android/releases/download/3.5.4/shadowsocksr-android-3.5.4.apk
manyuser.zip -- https://github.com/shadowsocksrr/shadowsocksr/archive/manyuser.zip
ShadowsocksR-win-4.9.0.zip -- https://github.com/shadowsocksrr/shadowsocksr-csharp/releases/download/4.9.0/ShadowsocksR-win-4.9.0.zip

You can alternatively try a mirror:
shadowsocksr-android-3.5.4.apk -- https://s3.tok.ap.cloud-object-storage.appdomain.cloud/xzdl/shadowsocksr-android-3.5.4.apk
manyuser.zip -- https://s3.tok.ap.cloud-object-storage.appdomain.cloud/xzdl/manyuser.zip
ShadowsocksR-win-4.9.0.zip -- https://s3.tok.ap.cloud-object-storage.appdomain.cloud/xzdl/ShadowsocksR-win-4.9.0.zip

In either case, the sha256 checksums should be as follows:
d2b443e11b3dbffebf52b76f27598bc3b830bb5339f26b911baa75c1ce53aee7 shadowsocksr-android-3.5.4.apk
b9551c2a0a25b77218a6340cf1077fc0715b7d8841fd0334157923f62225519f manyuser.zip
6f3a6cfd099d37492b1ac6ea3d504acc6d4c2948c9cc99de59d7488ef18bf6b1 ShadowsocksR-win-4.9.0.zip

Server

These instructions are for a virtual private server (VPS) running Ubuntu Linux 18.04.
Download

SSH into your server. For example, if your server has public IP address 3.4.5.6:

ssh usernameonserver@3.4.5.6

Update existing packages:

sudo apt update
sudo apt upgrade

Install on your server the prerequisite packages for ShadowsocksR:

sudo apt install wget zip unzip python-m2crypto libsodium23

We are going to install ShadowsocksR into our /usr/local directory, so change into that directory:

cd /usr/local

Get the source either from Github:

sudo wget https://github.com/shadowsocksrr/shadowsocksr/archive/manyuser.zip

Or from a mirror:

sudo wget https://s3.tok.ap.cloud-object-storage.appdomain.cloud/xzdl/manyuser.zip

Check the integrity of the downloaded zip file with the sha256sum command:

sha256sum manyuser.zip

The SHA256 checksum should match the value stated at the beginning of this post.

Unzip the download:

sudo unzip manyuser.zip

Rename the extracted directory:

sudo mv shadowsocksr-manyuser shadowsocksr
Configure

Change into the extracted directory:

cd shadowsocksr

Create the initial ShadowsocksR configuration file:

sudo bash initcfg.sh

The IP address for ShadowsocksR to listen on is the internal IP address of the interface. You can find it with the command:

ip a

Edit the ShadowsocksR configuration file:

sudo vi user-config.json

Specify your values for the ShadowsocksR port, password, encryption method, protocol, obfuscation method, and so on.

Here is an example file. Press the i key on your computer keyboard to enter insert mode.

{
"server": "0.0.0.0",
"server_ipv6": "::",
"server_port": 80,
"local_address": "127.0.0.1",
"local_port": 1080,
"password": "86tufeE96hJJrdjr",
"method": "none",
"protocol": "auth_chain_a",
"protocol_param": "",
"obfs": "http_post",
"obfs_param": "",
"speed_limit_per_con": 0,
"speed_limit_per_user": 0,
"additional_ports" : {},
"additional_ports_only" : false,
"timeout": 120,
"udp_timeout": 60,
"dns_ipv6": false,
"connect_verbose_info": 0,
"redirect": "*:80#127.0.0.1:8080",
"fast_open": false
}

Press Esc on your computer keyboard to escape from insert mode. Type :wq and press Enter to write the file to disk and quit the editor.

Notice the redirect to localhost port 8080 in case of a bad password. In a moment, we will set up a web server to listen on localhost port 8080.
Service

Now create the systemd service file for SSR:

sudo vi /etc/systemd/system/shadowsocksr.service

Press the i key to enter insert mode. Insert contents as follows:

[Unit]
Description=ShadowsocksR server
After=network.target
Wants=network.target

[Service]
Type=forking
PIDFile=/var/run/shadowsocksr.pid
ExecStart=/usr/bin/python /usr/local/shadowsocksr/shadowsocks/server.py --pid-file /var/run/shadowsocksr.pid -c /usr/local/shadowsocksr/user-config.json -d start
ExecStop=/usr/bin/python /usr/local/shadowsocksr/shadowsocks/server.py --pid-file /var/run/shadowsocksr.pid -c /usr/local/shadowsocksr/user-config.json -d stop
ExecReload=/bin/kill -HUP $MAINPID
KillMode=process
Restart=always

[Install]
WantedBy=multi-user.target

Press Esc to get out of insert mode, then type :wq and press Enter to write the file out and quit the editor.

Make SSR start on reboot, and also start it now:

sudo systemctl enable shadowsocksr

sudo systemctl start shadowsocksr

Check that ShadowsocksR is active (running) and listening as expected:

sudo systemctl status shadowsocksr

sudo ss -tulpn | grep 80

If there are any problems, you can look in the logs:

sudo journalctl -u shadowsocksr

sudo tail /var/log/shadowsocksr.log
Website

Now we will install the cover website. This will make the server look like a simple web server to any casual visitors to your external IP address.

sudo apt install apache2

Apache HTTP server will fail to start because ShadowsocksR is already listening on port 80. Before we deal with that, we will add some pages to the website.

cd ~

wget https://github.com/arcdetri/sample-blog/archive/master.zip

unzip master.zip

sudo cp -rf sample-blog-master/html/* /var/www/html/

Now configure the web server listen only on localhost port 8080.

sudo vi /etc/apache2/ports.conf

Restrict the listen line:

Listen 127.0.0.1:8080

Press Esc if you were in insert mode, then type :wq and press Enter to write the file out and quit the editor.

Make the corresponding change in the default virtual host:

sudo vi /etc/apache2/sites-available/000-default.conf

Change the first line:

<VirtualHost 127.0.0.1:8080>

Press Esc if you were in insert mode, then type :wq and press Enter to write the file out and quit the editor.

Restart the web server with these changes applied:

sudo systemctl restart apache2

At this stage, you can check your cover website. We will use a public IP address of 3.4.5.6 as an example. Open a browser, and visit http://3.4.5.6. You should see your cover website.

Exit your SSH session with the server:

exit
Client

Now we work on the host PC, which is also running Ubuntu 18.04. Update existing packages:

sudo apt update
sudo apt upgrade
Download

Install on your local Ubuntu host the prerequisite packages for the SSR Python client:

sudo apt install wget zip unzip python-m2crypto libsodium23

We are going to install ShadowsocksR into our Downloads directory, so change into that directory:

cd ~/Downloads

Get the source either from Github:

wget https://github.com/shadowsocksrr/shadowsocksr/archive/manyuser.zip

Or from a mirror:

wget https://s3.tok.ap.cloud-object-storage.appdomain.cloud/xzdl/manyuser.zip

Check the integrity of the downloaded zip file with the sha256sum command:

sha256sum manyuser.zip

The SHA256 checksum should match the value stated earlier in this post.

Unzip the download:

unzip manyuser.zip

Rename the extracted directory:

mv shadowsocksr-manyuser shadowsocksr
Configure

Edit your initial ShadowsocksR configuration file.

sudo vi /etc/shadowsocks.json

You can start with the template below. Of course, you must substitute in your values for the ShadowsocksR server IP address, port, password, encryption method, protocol, obfuscation method, and so on. In this template, the public IP address of the server is given as 3.4.5.6 as an example.

Press the i key on your keyboard to get into insert mode.

{
"server":"3.4.5.6",
"server_ipv6":"::",
"server_port":80,
"local_address":"127.0.0.1",
"local_port":1080,
"password":"86tufeE96hJJrdjr",
"timeout":300,
"udp_timeout":60,
"method":"none",
"protocol":"auth_chain_a",
"protocol_param":"",
"obfs":"http_post",
"obfs_param":"",
"fast_open":false,
"workers":1
}

When you have finished editing, write the file to disk and quit the editor.
Start

Change into the directory for the single-user version of SSR:

cd shadowsocksr/shadowsocks

Start the ShadowsocksR client running as a daemon:

sudo python local.py -c /etc/shadowsocks.json -d start

Check that it is running okay:

sudo tail /var/log/shadowsocksr.log
Configure Firefox

Open Firefox. Configure Firefox to send traffic to localhost port 1080.

    From the Firefox menu, select Preferences
    You should be on the General page
    Scroll down to Network Settings
    Click Settings
    Select Manual proxy configuration
    For SOCKS Host, type 127.0.0.1
    For Port, type 1080
    Select SOCKS v5
    Select Proxy DNS when using SOCKS v5
    Click OK

Now visit https://whatismyipaddress.com. You should see the IP address of your SSR server.


Project Celadon Repo Sync
-------------------------
Information Source: 
https://mcg-depot.intel.com/artifactory/webapp/#/home
https://mcg-depot.intel.com/artifactory/cactus-absp-jf/build/eng-builds/celadon/PSI/weekly/2019_WW41/

repo init -u ssh://android.intel.com/manifests -b android/celadon -m r1
curl -uzhang1:AP6E1SKiP1zpZ82pHP1vo7AqLMT -O "https://mcg-depot.intel.com/artifactory/cactus-absp-jf/build/eng-builds/celadon/PSI/weekly/2019_WW41/manifest-celadon-2019_WW41-r1-generated.xml"
/*
 * Actually I fetch this xml file via browser download
 */
mv manifest-celadon-2019_WW41-r1-generated.xml .repo/manifests/manifest-weekly.xml
repo init -u ssh://android.intel.com/manifests -m manifest-weekly.xml
repo sync --force-sync -j4

NOTE: Access "https://mcg-depot.intel.com/artifactory/webapp/#/home" to receive the above "curl ......" command parameter to
      retrieve specified manifest-xxx.xml file.

