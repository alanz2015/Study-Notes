Recently, I am involving Transparency Computing project. During the setup process, the core technologies of TC is divided into the following categories:
1. Network Topology

For Item 1, my understanding are the following:
1.1 On a dedicated PXEBoot support server
    1.1.1 Enable DHCP server, and configure w/ following information as example:
    
# DHCP Server Configuration File
#
#. see /usr/share/doc/dhcp*/dhcpd.conf.example
#
#. see dhcpd.conf(5) man page

option rfc3442-classless-static-routes code 121 = array of integer 8;
option ms-classless-static-routes code 249 = array of integer 8;
option space pxelinux;
option pxelinux.magic code 208 = string;
option pxelinux.configfile code 209 = text;
option pxelinux.pathprefix code 210 = text;
option pxelinux.reboottime code 211 = unsigned integer 32;
option architecture-type code 93 = unsigned integer 16;
subnet 192.168.1.0 netmask 255.255.255.0 {
   option routers 192.168.1.0;
   option subnet-mask 255.255.255.0;
   option broadcast-address 192.168.1.255;
}

subnet 192.168.2.0 netmask 255.255.255.0 {
   option routers 192.168.2.1;
   option subnet-mask 255.255.255.0;
   option broadcast-address 192.168.2.255;
   range 192.168.2.2 192.168.2.254;

   class "pxeclients" {
     match if substring (option vendor-class-identifier, 0, 9) = "PXEClient";
     next-server 192.168.1.10;
     if option architecture-type = 00:07 {
        filename "shim.efi";
        } else {
        filename "pxelinux/pxelinux.0";
     }
   }
}

subnet 192.168.3.0 netmask 255.255.255.0 {
   option routers 192.168.3.1;
   option subnet-mask 255.255.255.0;
   option broadcast-address 192.168.3.255;
   range 192.168.3.2 192.168.3.254;

   class "pxeclients" {
     match if substring (option vendor-class-identifier, 0, 9) = "PXEClient";
     next-server 192.168.1.10;
     if option architecture-type = 00:07 {
        filename "shim.efi";
        } else {
        filename "pxelinux/pxelinux.0";
     }
   }
}
Note: pxelinux.0 is one of output part of SYSLINUX project, which is used for UEFI bootloader as GRUB 2.04 does.
    1.1.2 TFTP Server
    The TFTP server is needed to provide:
        initrd.img - The “boot loader” which will be loaded to a RAM disk
        vmlinuz - A compressed bootable Linux kernel
        
2. Boot Content
# yumdownloader shim-version-architecture
# yumdownloader grub2-efi- version-architecture

Extract the needed binaries, and copy to tftp server work directory:

# rpm2cpio shim-version-architecture.rpm | cpio -dimv
# rpm2cpio grub2-efi- version-architecture.rpm | cpio -dimv
# cp boot/efi/EFI/redhat/grubx64.efi /var/lib/tftpboot/
# cp boot/efi/EFI/redhat/shim.efi /var/lib/tftpboot/

Download ISO image and move it to the PXE server, and mount the ISO Image:

# mount -t iso9660 /path/iso-file.iso /mnt -o loop,ro

Create a subdirectory to store boot image files within /var/lib/tftpboot:
# mkdir -p /var/lib/tftp/images/rhv-4.3

Copy the boot image files:
# cp /mnt/pxeboot/{vmlinuz,initrd.img} /var/lib/tftp/images/rhv-4.3/

Create a configuration file named grub.cfg in /var/lib/tftpboot. Here is a sample configuration file at /var/lib/tftpboot/grub.cfg:
set default=0
set timeout=60
menuentry  'Install RHVH 4.3' --class fedora --class gnu-linux --class gnu --class os {
   linuxefi images/rhv-4.3/vmlinuz inst.ks=http://192.168.1.10/kickstarts/ks.cfg inst.stage2=http:// 192.168.1.10/rhv4.3/ISO quiet
   initrdefi images/rhv-4.3/initrd.img
}

Enable and start the tftp service:

#systemctl enable tftp; systemctl start tftp


## Tips regarding creating the grub.cfg
Creating a grub.cfg might require some additional parameters dependent on the network. Here are some commonly used parameters which might be needed in the grub.cfg:

rd.net.timeout.carrier=60
If this option is set, dhclient is called with -timeout, so it is useful if the DHCP server replies are delayed:

ip=device-name:dhcp
This is useful in case the server which is to be installed has multiple interfaces and only one is dedicated to the PXE boot.
Reference: https://man7.org/linux/man-pages/man7/dracut.cmdline.7.html

3. Some knowledge on UEFI Boot
   On general storage device, there is 100MByte space reserved for EFI partition. Inside this EFI partition are the following file structure:
   EFI
    +----Boot
           +----bootx86.efi
    +----Microsoft
           +----Boot
                  +----bootmgfw.efi
    +----Ubuntu
           +----Boot
                  +----grubx64.efi
